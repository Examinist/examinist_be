---
openapi: 3.0.1
info:
  title: Examinist API
  version: v1
  description: This is Examinist API documentation
paths:
  "/coordinator_portal/coordinators/user_info":
    get:
      summary: Coordinator user info
      tags:
      - Coordinator Portal / Coordinator
      description: |-
        This API is responsible for:

              * Getting user info from the header
      operationId: userInfo
      security:
      - coordinator_auth: []
      responses:
        '200':
          description: user info returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/coordinator_portal/show/coordinator"
        '401':
          description: Suspicious token. Authorization failed!
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/invalid_credentials"
  "/coordinator_portal/labs":
    get:
      summary: List labs
      tags:
      - Coordinator Portal / Labs
      description: |-
        This API is responsible for:

              * Listing the labs
      operationId: listLabs
      security:
      - coordinator_auth: []
      responses:
        '200':
          description: Labs Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/coordinator_portal/list/labs_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    post:
      summary: Create Lab
      tags:
      - Coordinator Portal / Labs
      description: |-
        This API is responsible for:

              * Creating a Lab
      operationId: createLab
      parameters: []
      security:
      - coordinator_auth: []
      responses:
        '201':
          description: Lab Created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/coordinator_portal/show/lab"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Lab A
                capacity:
                  type: integer
                  example: 30
              required:
              - name
              - capacity
  "/coordinator_portal/labs/{id}":
    patch:
      summary: Update a Lab
      tags:
      - Coordinator Portal / Labs
      description: |-
        This API is responsible for:

              * Updating a Lab
      operationId: updateLab
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - coordinator_auth: []
      responses:
        '201':
          description: Lab Updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/coordinator_portal/show/lab"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Lab A
                capacity:
                  type: integer
                  example: 30
              required:
              - name
              - capacity
    delete:
      summary: Delete Lab
      tags:
      - Coordinator Portal / Labs
      description: |-
        This API is responsible for:

              * Deleting a Lab
      operationId: deleteLab
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - coordinator_auth: []
      responses:
        '201':
          description: Lab Deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/coordinator_portal/show/lab"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/coordinator_portal/sessions":
    post:
      summary: Coordinator Login
      tags:
      - Coordinator Portal / Session
      description: |-
        This API is responsible for:

              * Logging in the coordinator and returning:
              1)  The coordinator's object

              2)  The Authentication Bearer token
      operationId: coordinatorLogin
      parameters: []
      responses:
        '200':
          description: Coordinator logged in successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/coordinator_portal/show/coordinator_session"
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/invalid_credentials"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: super
                password:
                  type: string
                  example: '123456'
              required:
              - username
              - password
  "/staff_portal/courses/{course_id}/course_groups":
    get:
      summary: List Course Groups of a specific Course
      tags:
      - Staff Portal / Course Group
      description: |-
        This API is responsible for:

              * Listing the Course Groups of a specific Course
      operationId: listCourseGroups
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Course Groups Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/course_groups_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this course or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/staff_portal/courses":
    get:
      summary: List Courses
      tags:
      - Staff Portal / Course
      description: |-
        This API is responsible for:

              * Listing the Courses
      operationId: listCourses
      parameters:
      - "$ref": "#/components/global_parameters/page_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Courses Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/courses_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
  "/staff_portal/courses/{id}":
    get:
      summary: Show Course Info
      tags:
      - Staff Portal / Course
      description: |-
        This API is responsible for:

              * Showing the Course Info
      operationId: showCourse
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Course Info Showed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/course_info"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this course or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/staff_portal/courses/{id}/exam_template":
    get:
      summary: Show Course Exam Template
      tags:
      - Staff Portal / Course
      description: |-
        This API is responsible for:

              * Showing the Course Exam Template
      operationId: showCourseExamTemplate
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Course Exam Template Showed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/exam_template"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this course or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/staff_portal/courses/{id}/update_exam_template":
    patch:
      summary: Update Course Exam Template
      tags:
      - Staff Portal / Course
      description: |-
        This API is responsible for:

              * Updating the Course Exam Template
      operationId: updateCourseExamTemplate
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Course Exam Template Updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/exam_template"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this course or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                easy:
                  type: float
                  example: 70
                medium:
                  type: float
                  example: 25
                hard:
                  type: float
                  example: 5
                question_types_attributes:
                  type: array
                  items:
                    properties:
                      id:
                        type: bigint
                        example: 1
                      ratio:
                        type: float
                        example: 25
  "/staff_portal/exams":
    get:
      summary: List Exams
      tags:
      - Staff Portal / Exam
      description: |-
        This API is responsible for:

              * Listing the Exams
      operationId: listExams
      parameters:
      - name: filter_by_status
        in: query
        schema:
          type: string
          enum:
          - unscheduled
          - scheduled
          - ongoing
          - pending_grading
          - graded
        description: Filtering exams by status
      - name: course_id
        in: query
        schema:
          type: integer
          example: 1
        description: This is the course id given if the listing is in the course tab
      - "$ref": "#/components/global_parameters/page_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Course Exams Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/exams_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    post:
      summary: Create Exam
      tags:
      - Staff Portal / Exam
      description: |-
        This API is responsible for:

              * Create an Exam for a specific Course
      operationId: createExam
      parameters: []
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Exam Created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/exam"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Midterm
                duration:
                  type: integer
                  example: 120
                is_auto:
                  type: boolean
                  example: false
                course_id:
                  type: integer
                  example: 1
                has_models:
                  type: boolean
                  example: false
                exam_questions_attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      question_id:
                        type: integer
                        example: 1
                      score:
                        type: integer
                        example: 7
              required:
              - title
              - duration
              - is_auto
              - course_id
              - exam_questions_attributes
  "/staff_portal/exams/{id}":
    get:
      summary: Show Exam
      tags:
      - Staff Portal / Exam
      description: |-
        This API is responsible for:

              * View an Exam
      operationId: showExam
      parameters:
      - name: course_id
        in: query
        schema:
          type: integer
          example: 1
        description: This is the course id given if the listing is in the course tab
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Exam Showed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/exam"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    patch:
      summary: Update Exam
      tags:
      - Staff Portal / Exam
      description: |-
        This API is responsible for:

              * Update an Exam
      operationId: updateExam
      parameters:
      - name: course_id
        in: query
        schema:
          type: integer
          example: 1
        description: This is the course id given if the listing is in the course tab
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Exam Updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/exam"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Final
                duration:
                  type: integer
                  example: 60
                has_models:
                  type: boolean
                  example: false
                exam_questions_attributes:
                  type: array
                  items:
                    oneOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        question_id:
                          type: integer
                          example: 6
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        question_id:
                          type: integer
                          example: 7
                        score:
                          type: integer
                          example: 9
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        score:
                          type: integer
                          example: 5
                    - type: object
                      properties:
                        question_id:
                          type: integer
                          example: 10
                        score:
                          type: integer
                          example: 10
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 7
                        _destroy:
                          type: boolean
                          example: true
    delete:
      summary: Delete Exam
      tags:
      - Staff Portal / Exam
      description: |-
        This API is responsible for:

              * Delete an Exam
      operationId: deleteExam
      parameters:
      - name: course_id
        in: query
        schema:
          type: integer
          example: 1
        description: This is the course id given if the listing is in the course tab
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Exam Deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/exam"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/staff_portal/exams/auto_generate":
    post:
      summary: Generate Exam Automatically
      tags:
      - Staff Portal / Exam
      description: |-
        This API is responsible for:

              * Generate an Exam Automatically for a specific Course
      operationId: autoGenerateExam
      parameters: []
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Exam Automatically generated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/exam"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Midterm
                duration:
                  type: integer
                  example: 60
                course_id:
                  type: integer
                  example: 1
                has_models:
                  type: boolean
                  example: false
                question_type_topics:
                  type: array
                  items:
                    type: object
                    properties:
                      question_type_id:
                        type: integer
                        example: 1
                      topic_ids:
                        type: array
                        items:
                          type: integer
                        example:
                        - 1
                        - 2
                        - 3
              required:
              - title
              - duration
              - course_id
              - question_type_topics
  "/staff_portal/labs":
    get:
      summary: List labs
      tags:
      - Staff Portal / Labs
      description: |-
        This API is responsible for:

              * Listing the labs
      operationId: listLabs
      security:
      - staff_auth: []
      responses:
        '200':
          description: Labs Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/labs_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/staff_portal/courses/{course_id}/question_types":
    get:
      summary: List Question Types of a specific Course
      tags:
      - Staff Portal / Question Types
      description: |-
        This API is responsible for:

              * Listing the Question Types of a specific Course
      operationId: listQuestionTypes
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Question Types Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/question_types"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    post:
      summary: Create Question Types for a specific Course
      tags:
      - Staff Portal / Question Types
      description: |-
        This API is responsible for:

              * Creating a Question Type for a specific Course
      operationId: createQuestionTYpe
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Question Type Created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/question_type"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
        '422':
          description: attribute already taken for question types in this course
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/already_taken"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Modeling
                easy_weight:
                  type: integer
                  example: 1
                medium_weight:
                  type: integer
                  example: 2
                hard_weight:
                  type: integer
                  example: 3
              required:
              - name
  "/staff_portal/courses/{course_id}/question_types/{id}":
    patch:
      summary: Update Question Type for a specific Course
      tags:
      - Staff Portal / Question Types
      description: |-
        This API is responsible for:

              * Updating a Question Type for a specific Course
      operationId: updateQuestionType
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Question Type Updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/question_type"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
        '400':
          description: Name can not be changed as it is a default question type
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/bad_request"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Modeling
                easy_weight:
                  type: integer
                  example: 1
                medium_weight:
                  type: integer
                  example: 2
                hard_weight:
                  type: integer
                  example: 3
    delete:
      summary: Delete Question Type for a specific Course
      tags:
      - Staff Portal / Question Types
      description: |-
        This API is responsible for:

              * Deleting a Question Type for a specific Course
      operationId: deleteQuestionType
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Question Type Deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/question_type"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
        '400':
          description: You can not delete default question types
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/bad_request"
  "/staff_portal/courses/{course_id}/questions":
    get:
      summary: List Questions of a specific Course
      tags:
      - Staff Portal / Course Questions
      description: |-
        This API is responsible for:

              * Listing the Questions of a specific Course
      operationId: listQuestions
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      - name: filter_by_header
        in: query
        schema:
          type: string
          example: header
        description: Search qusetions by header
      - name: filter_by_topic_id
        in: query
        schema:
          type: integer
          example: 1
        description: Filter qusetions by topic id
      - name: filter_by_question_type_id
        in: query
        schema:
          type: integer
          example: 1
        description: Filter qusetions by question type id
      - name: filter_by_difficulty
        in: query
        schema:
          type: string
          enum:
          - easy
          - medium
          - hard
        description: Filter qusetions by difficulty
      - "$ref": "#/components/global_parameters/page_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Course Questions Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/questions_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    post:
      summary: Create Question for a specific Course
      tags:
      - Staff Portal / Course Questions
      description: |-
        This API is responsible for:

              * Create a Question for a specific Course
      operationId: createQuestion
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Question Created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/question"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                header:
                  type: string
                  example: header
                difficulty:
                  type: string
                  example: medium
                answer_type:
                  type: string
                  enum:
                  - single_answer
                  - multiple_answers
                  - text_answer
                  - pdf_answer
                  example: multiple_answers
                question_type_id:
                  type: integer
                  example: 1
                topic_id:
                  type: integer
                  example: 1
                choices_attributes:
                  type: array
                  items:
                    oneOf:
                    - type: object
                      properties:
                        choice:
                          type: string
                          example: choice one
                        is_answer:
                          type: boolean
                          example: true
                    - type: object
                      properties:
                        choice:
                          type: string
                          example: choice two
                    - type: object
                      properties:
                        choice:
                          type: string
                          example: choice three
                        is_answer:
                          type: boolean
                          example: true
                    - type: object
                      properties:
                        choice:
                          type: string
                          example: choice four
              required:
              - header
              - difficulty
              - answer_type
              - question_type_id
              - topic_id
              - choices_attributes
  "/staff_portal/courses/{course_id}/questions/{id}":
    patch:
      summary: Update Question for a specific Course
      tags:
      - Staff Portal / Course Questions
      description: |-
        This API is responsible for:

              * Update a Question for a specific Course
      operationId: updateQuestion
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Question Updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/question"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                header:
                  type: string
                  example: header
                difficulty:
                  type: string
                  example: easy
                topic_id:
                  type: integer
                  example: 1
                choices_attributes:
                  type: array
                  items:
                    oneOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        choice:
                          type: string
                          example: choice one modified
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        choice:
                          type: string
                          example: choice one modified
                        is_answer:
                          type: boolean
                          example: true
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        is_answer:
                          type: boolean
                          example: false
                    - type: object
                      properties:
                        choice:
                          type: string
                          example: choice five
                        is_answer:
                          type: boolean
                          example: true
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 7
                        _destroy:
                          type: boolean
                          example: true
    delete:
      summary: Delete Question for a specific Course
      tags:
      - Staff Portal / Course Questions
      description: |-
        This API is responsible for:

              * Delete a Question for a specific Course
      operationId: deleteQuestion
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Question Deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/question"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/staff_portal/schedules":
    get:
      summary: List Schedules
      tags:
      - Staff Portal / Schedule
      description: |-
        This API is responsible for:

              * Listing the Schedules
      operationId: listSchedules
      security:
      - staff_auth: []
      responses:
        '200':
          description: Schedules Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/schedules_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    post:
      summary: Create Schedule
      tags:
      - Staff Portal / Schedule
      description: |-
        This API is responsible for:

              * Create a Schedule
      operationId: createSchedule
      parameters: []
      security:
      - staff_auth: []
      responses:
        '201':
          description: Schedule Created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/schedule"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: CSED-Midterm
                exams:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      starts_at:
                        type: datetime
                        example: '2023-06-06T12:38:03.081+03:00'
                      _force:
                        type: boolean
                        example: false
                      busy_labs_attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            lab_id:
                              type: integer
                              example: 1
              required:
              - title
              - exams
  "/staff_portal/schedules/{id}":
    get:
      summary: Show Schedule
      tags:
      - Staff Portal / Schedule
      description: |-
        This API is responsible for:

              * View a Schedule
      operationId: showSchedule
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Schedule Showed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/schedule"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    patch:
      summary: Update Schedule
      tags:
      - Staff Portal / Schedule
      description: |-
        This API is responsible for:

              * Update a Schedule
      operationId: updateSchedule
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Schedule Updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/schedule"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: CSED-Final
                exams_attributes:
                  type: array
                  items:
                    oneOf:
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        starts_at:
                          type: datetime
                          example: '2023-06-06T12:38:03.081+03:00'
                        _force:
                          type: boolean
                          example: false
                        busy_labs_attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              lab_id:
                                type: integer
                                example: 1
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        starts_at:
                          type: datetime
                          example: '2023-06-06T12:38:03.081+03:00'
                        _force:
                          type: boolean
                          example: false
                        busy_labs_attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 5
                              lab_id:
                                type: integer
                                example: 6
                    - type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        starts_at:
                          type: datetime
                          example: '2023-06-06T12:38:03.081+03:00'
                        _force:
                          type: boolean
                          example: false
                        busy_labs_attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 5
                              _destroy:
                                type: boolean
                                example: true
    delete:
      summary: Delete Schedule
      tags:
      - Staff Portal / Schedule
      description: |-
        This API is responsible for:

              * Delete a Schedule
      operationId: deleteSchedule
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Schedule Deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/schedule"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/staff_portal/sessions":
    post:
      summary: Staff Login
      tags:
      - Staff Portal / Session
      description: |-
        This API is responsible for:

              * Logging in the staff and returning the staff's object

              * returning the Authentication Bearer token
      operationId: staffLogin
      parameters: []
      responses:
        '200':
          description: Staff logged in successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/staff_session"
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/invalid_credentials"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: marioma
                password:
                  type: string
                  example: '123456'
              required:
              - username
              - password
  "/staff_portal/staffs/user_info":
    get:
      summary: Staff user info
      tags:
      - Staff Portal / Staff
      description: |-
        This API is responsible for:

              * Getting user info from the header
      operationId: userInfo
      security:
      - staff_auth: []
      responses:
        '200':
          description: user info returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/staff"
        '401':
          description: Suspicious token. Authorization failed!
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/invalid_credentials"
  "/staff_portal/courses/{course_id}/topics":
    get:
      summary: List Topics of a specific Course
      tags:
      - Staff Portal / Course Topics
      description: |-
        This API is responsible for:

              * Listing the Topics of a specific Course
      operationId: listTopics
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      security:
      - staff_auth: []
      responses:
        '200':
          description: Course Topics Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/list/topics_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
    post:
      summary: Create Topic for a specific Course
      tags:
      - Staff Portal / Course Topics
      description: |-
        This API is responsible for:

              * Create a Topic for a specific Course
      operationId: createTopic
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Topic Created successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/topic"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: introduction
              required:
              - name
  "/staff_portal/courses/{course_id}/topics/{id}":
    patch:
      summary: Update Topic for a specific Course
      tags:
      - Staff Portal / Course Topics
      description: |-
        This API is responsible for:

              * Update a Topic for a specific Course
      operationId: updateTopic
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Topic Updated successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/topic"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: introduction
    delete:
      summary: Delete Topic for a specific Course
      tags:
      - Staff Portal / Course Topics
      description: |-
        This API is responsible for:

              * Delete a Topic for a specific Course
      operationId: deleteTopic
      parameters:
      - "$ref": "#/components/global_parameters/course_id_param"
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - staff_auth: []
      responses:
        '201':
          description: Course Topic Deleted successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/staff_portal/show/topic"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this item or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/student_portal/courses":
    get:
      summary: List Courses
      tags:
      - Student Portal / Course
      description: |-
        This API is responsible for:

              * Listing the Courses
      operationId: listCourses
      parameters:
      - "$ref": "#/components/global_parameters/page_param"
      security:
      - student_auth: []
      responses:
        '200':
          description: Courses Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/student_portal/list/courses_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
  "/student_portal/courses/{id}":
    get:
      summary: Show Course Info
      tags:
      - Student Portal / Course
      description: |-
        This API is responsible for:

              * Showing the Course Info
      operationId: showCourse
      parameters:
      - "$ref": "#/components/global_parameters/id_param"
      security:
      - student_auth: []
      responses:
        '200':
          description: Course Info Showed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/student_portal/show/course_info"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
        '404':
          description: You may have no access to this course or it doesnt exist
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/not_found"
  "/student_portal/sessions":
    post:
      summary: Student Login
      tags:
      - Student Portal / Session
      description: |-
        This API is responsible for:

              * Logging in the student and returning the student's object

              * returning the Authentication Bearer token
      operationId: studentLogin
      parameters: []
      responses:
        '200':
          description: Student logged in successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/student_portal/show/student_session"
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/invalid_credentials"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: '18011769'
                password:
                  type: string
                  example: '123456'
              required:
              - username
              - password
  "/student_portal/student_exams":
    get:
      summary: List Student Exams
      tags:
      - Student Portal / Student Exams
      description: |-
        This API is responsible for:

              * Listing the Student Exams
      operationId: listStudentExams
      parameters:
      - "$ref": "#/components/global_parameters/page_param"
      security:
      - student_auth: []
      responses:
        '200':
          description: Student Exams Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/student_portal/list/student_exams_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
  "/student_portal/student_exams/sixty_minutes_exams":
    get:
      summary: List 60 Minutes Student Exams
      tags:
      - Student Portal / Student Exams
      description: |-
        This API is responsible for:

              * Listing the 60 minutes Student Exams
      operationId: listSixtyMinutesStudentExams
      parameters:
      - "$ref": "#/components/global_parameters/page_param"
      security:
      - student_auth: []
      responses:
        '200':
          description: Student Exams Listed successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/student_portal/list/student_exams_list"
        '401':
          description: One of the following errors
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/unauthorized"
  "/student_portal/students/user_info":
    get:
      summary: Student user info
      tags:
      - Student Portal / Student
      description: |-
        This API is responsible for:

              * Getting user info from the header
      operationId: userInfo
      security:
      - staff_auth: []
      responses:
        '200':
          description: user info returned successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/responses/student_portal/show/student"
        '401':
          description: Suspicious token. Authorization failed!
          content:
            application/json:
              schema:
                "$ref": "#/components/errors/invalid_credentials"
servers:
- url: http://localhost:3000
  variables:
    defaultHost:
      default: localhost:3000/
components:
  securitySchemes:
    coordinator_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    staff_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    student_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  global_parameters:
    id_param:
      name: id
      in: path
      description: The id to fetch with
      required: true
      schema:
        type: number
        example: 1
    page_param:
      name: page
      in: query
      description: The current page for paginated items, send it with value = -1 if
        no pagination needed
      schema:
        type: number
        example: -1
    course_id_param:
      name: course_id
      in: path
      description: The course id to fetch with
      required: true
      schema:
        type: number
        example: 1
  schemas:
    university:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Alexandria University
      required:
      - id
      - name
    lab:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Lab A
        capacity:
          type: integer
          example: 30
      required:
      - id
      - name
      - capacity
    busy_lab:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Lab A
      required:
      - id
      - name
    detailed_lab:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Lab A
        capacity:
          type: integer
          example: 30
        university:
          "$ref": "#/components/schemas/university"
      required:
      - id
      - name
      - capacity
      - university
    faculty:
      type: object
      properties:
        id:
          type: integer
          example: 1
        faculty_name:
          type: string
          example: Faculty of Engineering
        university:
          "$ref": "#/components/schemas/university"
      required:
      - id
      - faculty_name
      - university
    coordinator:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: super
        email:
          type: string
          example: ahmed.gamal5551.ag@gmail.com
        role:
          type: string
          example: university_admin
        university:
          "$ref": "#/components/schemas/university"
      required:
      - id
      - username
      - email
      - university
    coordinator_session:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: super
        email:
          type: string
          example: ahmed.gamal5551.ag@gmail.com
        role:
          type: string
          example: university_admin
        university:
          "$ref": "#/components/schemas/university"
        auth_token:
          type: string
          example: hgcscxmopjsecohsecophopshcijsic
      required:
      - id
      - username
      - email
      - university
      - auth_token
    detailed_student:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: ahmed.gamal5551.ag@gmail.com
        first_name:
          type: string
          example: Ahmed
        last_name:
          type: string
          example: Gamal
        username:
          type: string
          example: '18010083'
        role:
          type: string
          example: student
        academic_id:
          type: string
          example: '18010083'
        faculty:
          "$ref": "#/components/schemas/faculty"
      required:
      - id
      - email
      - first_name
      - last_name
      - username
      - faculty_id
      - academic_id
    student:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: Ahmed
        last_name:
          type: string
          example: Gamal
        username:
          type: string
          example: '18010083'
        role:
          type: string
          example: student
      required:
      - id
      - first_name
      - last_name
      - username
      - role
    student_session:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: Ahmed
        last_name:
          type: string
          example: Gamal
        username:
          type: string
          example: '18010083'
        role:
          type: string
          example: student
        auth_token:
          type: string
          example: hgcscxmopjsecohsecophopshcijsic
      required:
      - id
      - first_name
      - last_name
      - username
      - role
      - auth_token
    detailed_staff:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: ahmed.gamal5551.ag@gmail.com
        first_name:
          type: string
          example: Ahmed
        last_name:
          type: string
          example: Gamal
        username:
          type: string
          example: jimmy
        role:
          type: string
          example: instructor
        faculty:
          "$ref": "#/components/schemas/faculty"
      required:
      - id
      - email
      - first_name
      - last_name
      - username
      - faculty_id
      - role
    staff:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: Ahmed
        last_name:
          type: string
          example: Gamal
        username:
          type: string
          example: jimmy
        role:
          type: string
          example: instructor
      required:
      - id
      - first_name
      - last_name
      - username
      - role
    staff_session:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: Ahmed
        last_name:
          type: string
          example: Gamal
        username:
          type: string
          example: jimmy
        role:
          type: string
          example: instructor
        auth_token:
          type: string
          example: hgcscxmopjsecohsecophopshcijsic
      required:
      - id
      - first_name
      - last_name
      - username
      - role
      - auth_token
    course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Database
        code:
          type: string
          example: CSE512
      required:
      - id
      - title
      - code
    course_group:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Group A
        end_date:
          type: date_time
          example: '2023-03-25T09:25:25.551Z'
        instructors:
          type: array
          items:
            "$ref": "#/components/schemas/staff"
        students:
          type: array
          items:
            "$ref": "#/components/schemas/student"
      required:
      - id
      - end_date
      - instructors
      - students
    detailed_course_info:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Database
        code:
          type: string
          example: CSE512
        credit_hours:
          type: integer
          example: 3
        instructors:
          type: array
          items:
            "$ref": "#/components/schemas/staff"
        students:
          type: array
          items:
            "$ref": "#/components/schemas/student"
      required:
      - id
      - title
      - code
      - credit_hours
      - instructors
      - students
    topic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Introduction
      required:
      - id
      - name
    detailed_topic:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Introduction
        course:
          "$ref": "#/components/schemas/course"
      required:
      - id
      - name
      - course
    question_type:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: MCQ
        easy_weight:
          type: integer
          example: 1
        medium_weight:
          type: integer
          example: 2
        hard_weight:
          type: integer
          example: 3
        is_deletable:
          type: boolean
          example: false
        ratio:
          type: float
          example: 25
    exam_template:
      type: object
      properties:
        id:
          type: integer
          example: 1
        easy:
          type: float
          example: 60.0
        medium:
          type: float
          example: 30.0
        hard:
          type: float
          example: 10.0
        question_types:
          type: array
          items:
            "$ref": "#/components/schemas/question_type"
        course:
          "$ref": "#/components/schemas/course"
    choice:
      type: object
      properties:
        id:
          type: integer
          example: 1
        choice:
          type: string
          example: choice
        is_answer:
          type: boolean
          example: true
      required:
      - id
      - choice
      - is_answer
    correct_answer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        answer:
          type: string
          example: answer
        choice_id:
          type: integer
          example: 1
      required:
      - id
      - choice
    question:
      type: object
      properties:
        id:
          type: integer
          example: 1
        header:
          type: string
          example: header
        difficulty:
          type: string
          enum:
          - easy
          - medium
          - hard
          example: easy
        answer_type:
          type: string
          enum:
          - single_answer
          - multiple_answers
          - text_answer
          - pdf_answer
          example: multiple_answers
        question_type:
          "$ref": "#/components/schemas/question_type"
        topic:
          "$ref": "#/components/schemas/topic"
        choices:
          type: array
          items:
            "$ref": "#/components/schemas/choice"
        correct_answers:
          type: array
          items:
            "$ref": "#/components/schemas/correct_answer"
      required:
      - id
      - header
      - difficulty
      - answer_type
      - question_type
      - topic
      - choices
      - correct_answers
    detailed_question:
      type: object
      properties:
        id:
          type: integer
          example: 1
        header:
          type: string
          example: header
        difficulty:
          type: string
          enum:
          - easy
          - medium
          - hard
          example: easy
        answer_type:
          type: string
          enum:
          - single_answer
          - multiple_answers
          - text_answer
          - pdf_answer
          example: multiple_answers
        question_type:
          "$ref": "#/components/schemas/question_type"
        topic:
          "$ref": "#/components/schemas/topic"
        choices:
          type: array
          items:
            "$ref": "#/components/schemas/choice"
        correct_answers:
          type: array
          items:
            "$ref": "#/components/schemas/correct_answer"
        course:
          "$ref": "#/components/schemas/course"
      required:
      - id
      - header
      - difficulty
      - answer_type
      - question_type
      - topic
      - choices
      - correct_answers
      - course
    exam:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Midterm
        status:
          type: string
          enum:
          - unscheduled
          - scheduled
          - ongoing
          - pending_grading
          - graded
          example: unscheduled
        duration:
          type: integer
          example: 120
        total_score:
          type: integer
          example: 40
        has_models:
          type: boolean
          example: false
        created_at:
          type: datetime
          example: '2023-04-06T12:38:03.081+03:00'
        scheduled_date:
          type: datetime
          example: '2023-04-26T12:38:03.081+03:00'
        creation_mode:
          type: string
          example: Manual
        creator:
          "$ref": "#/components/schemas/staff"
        course:
          "$ref": "#/components/schemas/course"
        number_of_students:
          type: integer
          example: 40
        busy_labs:
          type: array
          items:
            "$ref": "#/components/schemas/busy_lab"
      required:
      - id
      - title
      - status
      - duration
      - total_score
      - created_at
      - scheduled_date
      - creation_mode
      - creator
      - course
    detailed_exam:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Midterm
        status:
          type: string
          enum:
          - unscheduled
          - scheduled
          - ongoing
          - pending_grading
          - graded
          example: unscheduled
        duration:
          type: integer
          example: 120
        total_score:
          type: integer
          example: 40
        has_models:
          type: boolean
          example: false
        created_at:
          type: datetime
          example: '2023-04-06T12:38:03.081+03:00'
        scheduled_date:
          type: datetime
          example: '2023-04-26T12:38:03.081+03:00'
        creation_mode:
          type: string
          example: Manual
        creator:
          "$ref": "#/components/schemas/staff"
        course:
          "$ref": "#/components/schemas/course"
        number_of_students:
          type: integer
          example: 40
        busy_labs:
          type: array
          items:
            "$ref": "#/components/schemas/busy_lab"
        exam_questions:
          type: array
          items:
            type: object
            properties:
              mcq:
                type: array
                items:
                  "$ref": "#/components/schemas/exam_question"
      required:
      - id
      - title
      - status
      - duration
      - total_score
      - created_at
      - scheduled_date
      - creation_mode
      - creator
      - course
      - exam_questions
    exam_question:
      type: object
      properties:
        id:
          type: integer
          example: 1
        score:
          type: integer
          example: 22
        question:
          "$ref": "#/components/schemas/question"
      required:
      - id
      - score
      - question
    schedule:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: CSED-Midterm
      required:
      - id
      - title
    detailed_schedule:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: CSED-Midterm
        exams:
          type: array
          items:
            "$ref": "#/components/schemas/exam"
      required:
      - id
      - title
      - exams
    student_exam:
      type: object
      properties:
        id:
          type: integer
          example: 1
        grade:
          type: float
          example: 50
        status:
          type: string
          enum:
          - upcoming
          - ongoing
          - pending_grading
          - graded
          example: upcoming
        exam_id:
          type: integer
          example: 1
        title:
          type: string
          example: Midterm
        total_score:
          type: integer
          example: 40
        scheduled_date:
          type: datetime
          example: '2023-04-26T12:38:03.081+03:00'
        ends_at:
          type: datetime
          example: '2023-04-26T14:38:03.081+03:00'
        duration:
          type: integer
          example: 120
        course:
          "$ref": "#/components/schemas/course"
        busy_lab:
          "$ref": "#/components/schemas/busy_lab"
  errors:
    invalid_credentials:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Invalid credentials
    not_found:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Unfortunately this course does not exist or you do not have permissions
            to access
    unauthorized:
      type: array
      items:
        type: object
        properties:
          status:
            type: string
            example: error
          message:
            type: string
            example: Invalid credentials
      example:
      - status: error
        message: Invalid Credentials
      - status: error
        message: Unauthorized action!
    already_taken:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Name has already been taken
    bad_request:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Bad Request, Error message mentioned above
  responses:
    coordinator_portal:
      show:
        coordinator_session:
          type: object
          properties:
            status:
              type: string
              example: success
            coordinator:
              "$ref": "#/components/schemas/coordinator_session"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        coordinator:
          type: object
          properties:
            status:
              type: string
              example: success
            coordinator:
              "$ref": "#/components/schemas/coordinator"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        lab:
          type: object
          properties:
            status:
              type: string
              example: success
            lab:
              "$ref": "#/components/schemas/detailed_lab"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
      list:
        labs_list:
          type: object
          properties:
            status:
              type: string
              example: success
            labs:
              type: array
              items:
                "$ref": "#/components/schemas/lab"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
    student_portal:
      show:
        student_session:
          type: object
          properties:
            status:
              type: string
              example: success
            student:
              "$ref": "#/components/schemas/student_session"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        course_info:
          type: object
          properties:
            status:
              type: string
              example: success
            course_info:
              "$ref": "#/components/schemas/detailed_course_info"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        student:
          type: object
          properties:
            status:
              type: string
              example: success
            student:
              "$ref": "#/components/schemas/student"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
      list:
        courses_list:
          type: object
          properties:
            status:
              type: string
              example: success
            number_of_pages:
              type: integer
              example: 4
            courses:
              type: array
              items:
                "$ref": "#/components/schemas/course"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        student_exams_list:
          type: object
          properties:
            status:
              type: string
              example: success
            number_of_pages:
              type: integer
              example: 4
            courses:
              type: array
              items:
                "$ref": "#/components/schemas/student_exam"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
    staff_portal:
      show:
        staff_session:
          type: object
          properties:
            status:
              type: string
              example: success
            student:
              "$ref": "#/components/schemas/staff_session"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        course_info:
          type: object
          properties:
            status:
              type: string
              example: success
            course_info:
              "$ref": "#/components/schemas/detailed_course_info"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        topic:
          type: object
          properties:
            status:
              type: string
              example: success
            topic:
              "$ref": "#/components/schemas/detailed_topic"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        question_type:
          type: object
          properties:
            status:
              type: string
              example: success
            question_type:
              "$ref": "#/components/schemas/question_type"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        question:
          type: object
          properties:
            status:
              type: string
              example: success
            question:
              "$ref": "#/components/schemas/detailed_question"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        exam:
          type: object
          properties:
            status:
              type: string
              example: success
            exam:
              "$ref": "#/components/schemas/detailed_exam"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        exam_template:
          type: object
          properties:
            status:
              type: string
              example: success
            exam_template:
              "$ref": "#/components/schemas/exam_template"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        staff:
          type: object
          properties:
            status:
              type: string
              example: success
            student:
              "$ref": "#/components/schemas/staff"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        schedule:
          type: object
          properties:
            status:
              type: string
              example: success
            schedule:
              "$ref": "#/components/schemas/detailed_schedule"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
      list:
        courses_list:
          type: object
          properties:
            status:
              type: string
              example: success
            number_of_pages:
              type: integer
              example: 4
            courses:
              type: array
              items:
                "$ref": "#/components/schemas/course"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        course_groups_list:
          type: object
          properties:
            status:
              type: string
              example: success
            course_groups:
              type: array
              items:
                "$ref": "#/components/schemas/course_group"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        topics_list:
          type: object
          properties:
            status:
              type: string
              example: success
            topics:
              type: array
              items:
                "$ref": "#/components/schemas/topic"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        question_types:
          type: object
          properties:
            status:
              type: string
              example: success
            question_types:
              type: array
              items:
                "$ref": "#/components/schemas/question_type"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        questions_list:
          type: object
          properties:
            status:
              type: string
              example: success
            number_of_pages:
              type: integer
              example: 4
            questions:
              type: array
              items:
                "$ref": "#/components/schemas/question"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        exams_list:
          type: object
          properties:
            status:
              type: string
              example: success
            number_of_pages:
              type: integer
              example: 4
            exams:
              type: array
              items:
                "$ref": "#/components/schemas/exam"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        labs_list:
          type: object
          properties:
            status:
              type: string
              example: success
            labs:
              type: array
              items:
                "$ref": "#/components/schemas/lab"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
        schedules_list:
          type: object
          properties:
            status:
              type: string
              example: success
            schedules:
              type: array
              items:
                "$ref": "#/components/schemas/schedule"
            message:
              type: string
              description: 'This message is the error message in case of status: "error"
                otherwise it is null'
              example: 
